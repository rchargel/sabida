// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: users.sql

package dao

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addUserToOrganization = `-- name: AddUserToOrganization :exec
INSERT INTO user_organizations (user_id, organization_id)
VALUES ($1, $2)
`

type AddUserToOrganizationParams struct {
	UserID         uuid.UUID
	OrganizationID uuid.UUID
}

func (q *Queries) AddUserToOrganization(ctx context.Context, arg AddUserToOrganizationParams) error {
	_, err := q.db.ExecContext(ctx, addUserToOrganization, arg.UserID, arg.OrganizationID)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, email)
VALUES (lower($1), lower($2))
RETURNING id, username, email, password, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Lower   string
	Lower_2 string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Lower, arg.Lower_2)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users SET deleted_at = NOW()
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getOrganizationByID = `-- name: GetOrganizationByID :one
SELECT id, name, created_at, updated_at, deleted_at FROM organizations
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetOrganizationByID(ctx context.Context, id uuid.UUID) (Organization, error) {
	row := q.db.QueryRowContext(ctx, getOrganizationByID, id)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getOrganizationByName = `-- name: GetOrganizationByName :one
SELECT id, name, created_at, updated_at, deleted_at FROM organizations
WHERE name = lower($1)
LIMIT 1
`

func (q *Queries) GetOrganizationByName(ctx context.Context, lower string) (Organization, error) {
	row := q.db.QueryRowContext(ctx, getOrganizationByName, lower)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getOrganizationsByUser = `-- name: GetOrganizationsByUser :many
SELECT organizations.id, organizations.name, organizations.created_at, organizations.updated_at, organizations.deleted_at FROM organizations INNER JOIN
user_organizations ON organizations.id = user_organizations.organization_id
AND user_organizations.deleted_at IS NULL
WHERE user_organizations.user_id = $1
AND organizations.deleted_at IS NULL
`

func (q *Queries) GetOrganizationsByUser(ctx context.Context, userID uuid.UUID) ([]Organization, error) {
	rows, err := q.db.QueryContext(ctx, getOrganizationsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, password, created_at, updated_at, deleted_at FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, password, created_at, updated_at, deleted_at FROM users
WHERE username = lower($1)
AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, lower string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, lower)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUsersByEmail = `-- name: GetUsersByEmail :one
SELECT id, username, email, password, created_at, updated_at, deleted_at FROM users
WHERE email = lower($1)
AND deleted_at IS NULL
LIMIT 1
`

func (q *Queries) GetUsersByEmail(ctx context.Context, lower string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUsersByEmail, lower)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUsersByOrganization = `-- name: GetUsersByOrganization :many
SELECT users.id, users.username, users.email, users.password, users.created_at, users.updated_at, users.deleted_at FROM users INNER JOIN
user_organizations ON users.id = user_organizations.user_id
AND user_organizations.deleted_at IS NULL
WHERE user_organizations.organization_id = $1
AND users.deleted_at IS NULL
`

func (q *Queries) GetUsersByOrganization(ctx context.Context, organizationID uuid.UUID) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsersByOrganization, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, email, password, created_at, updated_at, deleted_at FROM users
WHERE deleted_at IS NULL
ORDER BY username
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeUserFromOrganization = `-- name: RemoveUserFromOrganization :exec
UPDATE user_organizations
SET deleted_at = NOW(), deleted_by = $3
WHERE user_id = $1 AND organization_id = $2
`

type RemoveUserFromOrganizationParams struct {
	UserID         uuid.UUID
	OrganizationID uuid.UUID
	DeletedBy      uuid.NullUUID
}

func (q *Queries) RemoveUserFromOrganization(ctx context.Context, arg RemoveUserFromOrganizationParams) error {
	_, err := q.db.ExecContext(ctx, removeUserFromOrganization, arg.UserID, arg.OrganizationID, arg.DeletedBy)
	return err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users
SET password = $2
WHERE id = $1
`

type UpdatePasswordParams struct {
	ID       uuid.UUID
	Password sql.NullString
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.ID, arg.Password)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET username = $2,
	email = $3,
	password = $4,
	update_at = now()
WHERE id = $1
RETURNING id, username, email, password, created_at, updated_at, deleted_at
`

type UpdateUserParams struct {
	ID       uuid.UUID
	Username string
	Email    string
	Password sql.NullString
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
